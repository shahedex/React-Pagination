{"version":3,"sources":["logo.svg","components/Posts.js","components/Pagination.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Posts","_ref","posts","loading","react_default","a","createElement","className","map","post","key","id","title","Pagination","postsPerPage","totalPosts","paginate","pageNumbers","i","Math","ceil","push","number","onClick","href","App","_useState","useState","_useState2","Object","slicedToArray","setPosts","_useState3","_useState4","setLoading","_useState5","_useState6","currentPage","setCurrentPage","_useState7","_useState8","useEffect","asyncToGenerator","regenerator_default","mark","_callee","res","wrap","_context","prev","next","axios","get","sent","data","stop","apply","this","arguments","fetchPosts","indexOfLastPost","indexOfFirstPost","currentPosts","slice","components_Posts","components_Pagination","length","pageNumber","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gLCiBzBC,EAfD,SAAAC,GAAuB,IAApBC,EAAoBD,EAApBC,MACb,OADiCD,EAAbE,QAETC,EAAAC,EAAAC,cAAA,yBAGXF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBACRL,EAAMM,IAAI,SAAAC,GAAI,OACXL,EAAAC,EAAAC,cAAA,MAAII,IAAKD,EAAKE,GAAIJ,UAAU,mBACvBE,EAAKG,WCcRC,EAtBI,SAAAZ,GAGf,IAH2D,IAAzCa,EAAyCb,EAAzCa,aAAcC,EAA2Bd,EAA3Bc,WAAYC,EAAef,EAAfe,SACtCC,EAAc,GAEZC,EAAE,EAAGA,GAAKC,KAAKC,KAAKL,EAAWD,GAAeI,IAClDD,EAAYI,KAAKH,GAErB,OACId,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACTU,EAAYT,IAAI,SAAAc,GAAM,OACnBlB,EAAAC,EAAAC,cAAA,MAAII,IAAKY,EAAQf,UAAU,aACvBH,EAAAC,EAAAC,cAAA,KAAGiB,QAAS,kBAAMP,EAASM,IAASE,KAAK,KAAKjB,UAAU,aACnDe,sCC2BdG,MAlCf,WAAe,IAAAC,EACaC,mBAAS,IADtBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNxB,EADM0B,EAAA,GACCG,EADDH,EAAA,GAAAI,EAEiBL,oBAAS,GAF1BM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAEN7B,EAFM8B,EAAA,GAEGC,EAFHD,EAAA,GAAAE,EAGyBR,mBAAS,GAHlCS,EAAAP,OAAAC,EAAA,EAAAD,CAAAM,EAAA,GAGNE,EAHMD,EAAA,GAGOE,EAHPF,EAAA,GAAAG,EAI2BZ,mBAAS,IAJpCa,EAAAX,OAAAC,EAAA,EAAAD,CAAAU,EAAA,GAINzB,EAJM0B,EAAA,GAAAA,EAAA,GAMbC,oBAAU,YACQ,eAAAxC,EAAA4B,OAAAa,EAAA,EAAAb,CAAAc,EAAAtC,EAAAuC,KAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAAtC,EAAA0C,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACjBhB,GAAW,GADMc,EAAAE,KAAA,EAECC,IAAMC,IAAI,8CAFX,OAEXN,EAFWE,EAAAK,KAGjBtB,EAASe,EAAIQ,MACbpB,GAAW,GAJM,wBAAAc,EAAAO,SAAAV,MAAH,yBAAA5C,EAAAuD,MAAAC,KAAAC,YAAA,EAOhBC,IACC,IAIH,IAAMC,EAAkBvB,EAAcvB,EAChC+C,EAAmBD,EAAkB9C,EACrCgD,EAAe5D,EAAM6D,MAAMF,EAAkBD,GAInD,OACExD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBAAd,WACAH,EAAAC,EAAAC,cAAC0D,EAAD,CAAO9D,MAAO4D,EAAc3D,QAASA,IACrCC,EAAAC,EAAAC,cAAC2D,EAAD,CAAYnD,aAAcA,EAAcC,WAAYb,EAAMgE,OAAQlD,SALrD,SAACmD,GAAD,OAAgB7B,EAAe6B,QCnB9BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOtE,EAAAC,EAAAC,cAACqE,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.770f3ff6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\n\r\nconst Posts = ({ posts, loading}) => {\r\n    if(loading){\r\n        return <h2>Loading....</h2>\r\n    }\r\n    return (\r\n    <ul className=\"list-group mb-4\">\r\n         {posts.map(post => (\r\n             <li key={post.id} className=\"list-group-item\">\r\n                 {post.title}\r\n             </li>\r\n         ))}\r\n         </ul>\r\n    );\r\n};\r\n\r\nexport default Posts;\r\n","import React from 'react'\r\n\r\nconst Pagination = ({ postsPerPage, totalPosts, paginate }) => {\r\n    const pageNumbers = [];\r\n\r\n    for(let i=1; i <= Math.ceil(totalPosts/postsPerPage); i++){\r\n        pageNumbers.push(i);\r\n    }\r\n    return (\r\n        <nav>\r\n            <ul className=\"pagination\">\r\n                {pageNumbers.map(number => (\r\n                    <li key={number} className='page-item'>\r\n                        <a onClick={() => paginate(number)} href='!#' className='page-link'>\r\n                            {number}\r\n                        </a>\r\n                    </li>\r\n                ))}\r\n                \r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Pagination\r\n","import React, { useState, useEffect } from 'react';\nimport Posts from './components/Posts';\nimport Pagination from './components/Pagination';\nimport axios from 'axios';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage, setPostsPerPage] = useState(10);\n\n  useEffect(() => {\n    const fetchPosts = async() => {\n      setLoading(true);\n      const res = await axios.get('https://jsonplaceholder.typicode.com/posts');\n      setPosts(res.data);\n      setLoading(false);\n    }\n\n    fetchPosts();\n  }, []);\n//  console.log(posts);\n\n  //Get current Posts\n  const indexOfLastPost = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\n  const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);\n\n  // Change page\n  const paginate = (pageNumber) => setCurrentPage(pageNumber);\n  return (\n    <div className=\"container mt-5\">\n      <h1 className=\"text-primary mb-3\">My Blog</h1>\n      <Posts posts={currentPosts} loading={loading} />\n      <Pagination postsPerPage={postsPerPage} totalPosts={posts.length} paginate={paginate} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}